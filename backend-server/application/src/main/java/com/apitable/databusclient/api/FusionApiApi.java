/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.api;

import com.apitable.databusclient.ApiCallback;
import com.apitable.databusclient.ApiClient;
import com.apitable.databusclient.ApiException;
import com.apitable.databusclient.ApiResponse;
import com.apitable.databusclient.Configuration;
import com.apitable.databusclient.Pair;
import com.apitable.databusclient.ProgressRequestBody;
import com.apitable.databusclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FusionApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FusionApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FusionApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addRecords
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecordsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/records"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRecordsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling addRecords(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addRecords(Async)");
        }

        return addRecordsCall(dstId, authorization, _callback);

    }

    /**
     * Add multiple rows to a specified datasheet
     * Add multiple rows to a specified datasheet  Up to 10 records can be created in a single request. You need to bring &#x60;Content-Type: application/json&#x60; in the Request Header to submit data in raw json format. The POST data is a JSON object, which should contain an array: &#x60;records&#x60;, the records array contains multiple records to be created. The object &#x60;fields&#x60; contains the values of the fields to be created in a record, and can contain any number of field values, not necessarily all of them. If there are field defaults set, field values that are not passed in will be saved according to the default values at the time the fields were set.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public void addRecords(String dstId, String authorization) throws ApiException {
        addRecordsWithHttpInfo(dstId, authorization);
    }

    /**
     * Add multiple rows to a specified datasheet
     * Add multiple rows to a specified datasheet  Up to 10 records can be created in a single request. You need to bring &#x60;Content-Type: application/json&#x60; in the Request Header to submit data in raw json format. The POST data is a JSON object, which should contain an array: &#x60;records&#x60;, the records array contains multiple records to be created. The object &#x60;fields&#x60; contains the values of the fields to be created in a record, and can contain any number of field values, not necessarily all of them. If there are field defaults set, field values that are not passed in will be saved according to the default values at the time the fields were set.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addRecordsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addRecordsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add multiple rows to a specified datasheet (asynchronously)
     * Add multiple rows to a specified datasheet  Up to 10 records can be created in a single request. You need to bring &#x60;Content-Type: application/json&#x60; in the Request Header to submit data in raw json format. The POST data is a JSON object, which should contain an array: &#x60;records&#x60;, the records array contains multiple records to be created. The object &#x60;fields&#x60; contains the values of the fields to be created in a record, and can contain any number of field values, not necessarily all of them. If there are field defaults set, field values that are not passed in will be saved according to the default values at the time the fields were set.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecordsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRecordsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDatasheet
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasheetCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{space_id}/datasheets"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasheetValidateBeforeCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createDatasheet(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createDatasheet(Async)");
        }

        return createDatasheetCall(spaceId, authorization, _callback);

    }

    /**
     * Create Datasheet
     * Create Datasheet  Create Datasheet and their fields
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public void createDatasheet(String spaceId, String authorization) throws ApiException {
        createDatasheetWithHttpInfo(spaceId, authorization);
    }

    /**
     * Create Datasheet
     * Create Datasheet  Create Datasheet and their fields
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createDatasheetWithHttpInfo(String spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createDatasheetValidateBeforeCall(spaceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Datasheet (asynchronously)
     * Create Datasheet  Create Datasheet and their fields
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasheetAsync(String spaceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasheetValidateBeforeCall(spaceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFields
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/fields"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling createFields(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createFields(Async)");
        }

        return createFieldsCall(dstId, authorization, _callback);

    }

    /**
     * New field
     * New field  New field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public void createFields(String dstId, String authorization) throws ApiException {
        createFieldsWithHttpInfo(dstId, authorization);
    }

    /**
     * New field
     * New field  New field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createFieldsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createFieldsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * New field (asynchronously)
     * New field  New field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFields
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/fields"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling deleteFields(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteFields(Async)");
        }

        return deleteFieldsCall(dstId, authorization, _callback);

    }

    /**
     * Delete field
     * Delete field  Delete field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFields(String dstId, String authorization) throws ApiException {
        deleteFieldsWithHttpInfo(dstId, authorization);
    }

    /**
     * Delete field
     * Delete field  Delete field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFieldsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete field (asynchronously)
     * Delete field  Delete field
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRecords
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/records"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling deleteRecords(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRecords(Async)");
        }

        return deleteRecordsCall(dstId, authorization, _callback);

    }

    /**
     * Delete records
     * Delete records  Delete a number of records from a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRecords(String dstId, String authorization) throws ApiException {
        deleteRecordsWithHttpInfo(dstId, authorization);
    }

    /**
     * Delete records
     * Delete records  Delete a number of records from a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRecordsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete records (asynchronously)
     * Delete records  Delete a number of records from a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFields
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/fields"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling getFields(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getFields(Async)");
        }

        return getFieldsCall(dstId, authorization, _callback);

    }

    /**
     * Query all fields of a datasheet
     * Query all fields of a datasheet  All lines of the doc comment will be included to operation description.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public void getFields(String dstId, String authorization) throws ApiException {
        getFieldsWithHttpInfo(dstId, authorization);
    }

    /**
     * Query all fields of a datasheet
     * Query all fields of a datasheet  All lines of the doc comment will be included to operation description.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFieldsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getFieldsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Query all fields of a datasheet (asynchronously)
     * Query all fields of a datasheet  All lines of the doc comment will be included to operation description.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecordByDatasheetId
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordByDatasheetIdCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/records"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordByDatasheetIdValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling getRecordByDatasheetId(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRecordByDatasheetId(Async)");
        }

        return getRecordByDatasheetIdCall(dstId, authorization, _callback);

    }

    /**
     * Get multiple records of a datasheet
     * Get multiple records of a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public void getRecordByDatasheetId(String dstId, String authorization) throws ApiException {
        getRecordByDatasheetIdWithHttpInfo(dstId, authorization);
    }

    /**
     * Get multiple records of a datasheet
     * Get multiple records of a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getRecordByDatasheetIdWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRecordByDatasheetIdValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get multiple records of a datasheet (asynchronously)
     * Get multiple records of a datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordByDatasheetIdAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordByDatasheetIdValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViews
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewsCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewsValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling getViews(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getViews(Async)");
        }

        return getViewsCall(dstId, authorization, _callback);

    }

    /**
     * Query all views of a datasheet
     * Query all views of a datasheet  A datasheet can create up to 30 views and return them all at once when requesting a view, without paging.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public void getViews(String dstId, String authorization) throws ApiException {
        getViewsWithHttpInfo(dstId, authorization);
    }

    /**
     * Query all views of a datasheet
     * Query all views of a datasheet  A datasheet can create up to 30 views and return them all at once when requesting a view, without paging.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getViewsWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getViewsValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Query all views of a datasheet (asynchronously)
     * Query all views of a datasheet  A datasheet can create up to 30 views and return them all at once when requesting a view, without paging.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet Fields </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewsAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewsValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRecordsPatch
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordsPatchCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/records"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordsPatchValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling updateRecordsPatch(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRecordsPatch(Async)");
        }

        return updateRecordsPatchCall(dstId, authorization, _callback);

    }

    /**
     * Update Records
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public void updateRecordsPatch(String dstId, String authorization) throws ApiException {
        updateRecordsPatchWithHttpInfo(dstId, authorization);
    }

    /**
     * Update Records
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRecordsPatchWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRecordsPatchValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Records (asynchronously)
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordsPatchAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordsPatchValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRecordsPut
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordsPutCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/records"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordsPutValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling updateRecordsPut(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRecordsPut(Async)");
        }

        return updateRecordsPutCall(dstId, authorization, _callback);

    }

    /**
     * Update Records
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public void updateRecordsPut(String dstId, String authorization) throws ApiException {
        updateRecordsPutWithHttpInfo(dstId, authorization);
    }

    /**
     * Update Records
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRecordsPutWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRecordsPutValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Records (asynchronously)
     * Update Records  Update several records of a datasheet. When submitted using the PUT method, only the fields that are specified will have their data updated, and fields that are not specified will retain their old values.
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Datasheet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordsPutAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordsPutValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
